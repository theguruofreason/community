type Query {
    entities(id: ID, name: String, labels: [EntityLabels!], active: Boolean, before: DateTime, after: DateTime): [Entity]
    people(id: ID, uname: String, name: String): [Person]
    posts(authorId: ID!, before: DateTime, after: DateTime, types: [PostType!]): [Post!]
}

type Mutation {
    authorTextPost(authorId: ID!, content: String!, visibility: [Visibility!]!, activationDateTime: DateTime, deactivationDateTime: DateTime): TextPost!
    establishRelationship(subjectId: ID!, objectId: ID!, relationshipType: RelationshipType!, descriptor: String): Relationship!
}

scalar DateTime

interface Entity {
    id: ID!
    name: String!
    creationDateTime: DateTime!
    active: Boolean!
    description: String
}

enum EntityLabels {
    Person,
    Place,
    Thing,
    Business,
    Group,
    Event
}

enum RelationshipType {
    FAMILY
    FOLLOW
    FRIEND
    OWNERSHIP
    EMPLOYMENT
    MEMBERSHIP
    AFFILIATION
}

enum PostType {
    TextPost
    ImagePost
    AudioPost
    VideoPost
    LinkPost
}

type Relationship {
    subject: Entity!
    object: Entity!
    descriptor: String
}

type PostContext {
    creationDateTime: DateTime!
}

enum Role {
    USER
    MODERATOR
    ADMIN
}

type Address {
    line1: String!
    line2: String
    country: String!
    city: String!
    zip: [Int!]
}

type ContactInformation {
    addresses: [Address!]
    phones: [String!]
    emails: [String!]
    socials: [String!]
}

union Owner = Person | Business | Group
union GroupOrBusiness = Group | Business
union PostAuthor = Person | Business | Group | Event

type Person implements Entity {
    id: ID!
    name: String!
    people(relationshipTypes: [RelationshipType!], descriptorSearch: String): [Person!]
    things: [Thing!]
    jobs: [Business!]
    affiliations: [Group!]
    attending: [Event!]
    hosting: [Event!]
    creationDateTime: DateTime!
    active: Boolean!
    description: String
    uname: String!
    contactInformation: ContactInformation
    posts(types: [PostType], before: DateTime, after: DateTime): [Post!]!
    role: Role!
}

type Place implements Entity {
    id: ID!
    address: Address!
    name: String!
    ownedBy: [Owner!]
    createdBy: ID!
    creationDateTime: DateTime!
    active: Boolean!
    description: String
}

type Thing implements Entity {
    id: ID!
    type: [String!]
    name: String!
    ownedBy: [Owner!]!
    createdBy: ID!
    creationDateTime: DateTime!
    active: Boolean!
    description: String
}

type Business implements Entity {
    id: ID!
    description: String
    contactInformation: ContactInformation
    name: String!
    employs: [Person!]
    owns: [Thing!]
    affiliations: [GroupOrBusiness!]
    events: [Event!]
    posts: [Post!]
    createdBy: ID!
    creationDateTime: DateTime!
    active: Boolean!
}

type Group implements Entity {
    id: ID!
    posts: [Post!]
    name: String!
    affiliations: [Entity!]
    hostingEvents: [Event!]
    attendingEvents: [Event!]
    createdBy: ID!
    creationDateTime: DateTime!
    active: Boolean!
    description: String
}

type Event implements Entity {
    id: ID!
    occurringOn: [DateTime!]!
    posts: [Post!]
    name: String!
    location: Place
    hosts: [Entity!]!
    attendants: [Entity!]
    contactInformation: ContactInformation
    createdBy: Entity!
    creationDateTime: DateTime!
    active: Boolean!
    description: String
}

enum Visibility {
    PUBLIC
    FAMILY
    FRIENDS
    FOLLOWERS
    MEMBERS
    AFFILIATES
}

interface Post {
    creationDateTime: DateTime!
    activationDateTime: DateTime
    deactivationDateTime: DateTime
    visibility: [Visibility!]!
    content: String!
}

type TextPost implements Post {
    creationDateTime: DateTime!
    activationDateTime: DateTime
    deactivationDateTime: DateTime
    visibility: [Visibility!]!
    content: String!
}

type ImagePost implements Post {
    creationDateTime: DateTime!
    activationDateTime: DateTime
    deactivationDateTime: DateTime
    visibility: [Visibility!]!
    content: String!
    alt_description: String
}

type VideoPost implements Post {
    creationDateTime: DateTime!
    activationDateTime: DateTime
    deactivationDateTime: DateTime
    visibility: [Visibility!]!
    content: String!
    alt_description: String
    transcript: String
}

type AudioPost implements Post {
    creationDateTime: DateTime!
    activationDateTime: DateTime
    deactivationDateTime: DateTime
    visibility: [Visibility!]!
    content: String!
    alt_description: String
    transcript: String
}

type LinkPost implements Post {
    creationDateTime: DateTime!
    activationDateTime: DateTime
    deactivationDateTime: DateTime
    visibility: [Visibility!]!
    content: String!
}