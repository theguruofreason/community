interface Entity {
    id: ID!
    name: String!
    relationships: [Entity!] @relationship(type: RelationshipType, properties: "Relationship")
    createdBy: Entity!
    creationDateTime: DateTime!
    active: Boolean!
    description: String
}

scalar DateTime

enum Role {
    USER
    MODERATOR
    ADMIN
}

type Person implements Entity {
    id: ID!
    name: String!
    relationships: [Entity!]
    createdBy: Entity!
    creationDateTime: DateTime!
    active: Boolean!
    description: String
    uname: String!
    email: String
    posts: [Post]
    role: Role!
}

type Address {
    line1: String!
    country: String!
    city: String!
    zip: [number!]
}

type Place implements Entity {
    address: Address!
    id: ID!
    name: String!
    relationships: [Entity!]
    createdBy: Entity!
    creationDateTime: DateTime!
    active: Boolean!
    description: String
}

type Thing implements Entity {
    type: [String!]
    id: ID!
    name: String!
    relationships: [Entity!]
    createdBy: Entity!
    creationDateTime: DateTime!
    active: Boolean!
    description: String
}

type Group implements Thing {
    posts: [Post]
    id: ID!
    name: String!
    relationships: [Entity!]
    createdBy: Entity!
    creationDateTime: DateTime!
    active: Boolean!
    description: String
}

type Event implements Thing {
    occurringOn: [DateTime!]!
    posts: [Post]
    id: ID!
    name: String!
    relationships: [Entity!]
    createdBy: Entity!
    creationDateTime: DateTime!
    active: Boolean!
    description: String
}

type Post {
    id: ID!
    creationDateTime: DateTime!
    activationDateTime: DateTime
    deactivationDateTime: DateTime
    content: [PostContent!]!
}

type Relationship @relationshipProperties {
    type: RelationshipType!
    descriptor: String
}

enum RelationshipType {
    FAMILY_WITH
    FRIENDS_WITH
    OWNS
    EMPLOYEE_OF
    CLIENT_OF
    HOSTING
    AFFILIATED_WITH
    ATTENDING
}

type PostImage {
    uri: String!
    alt_description: String
}

type PostVideo {
    uri: String!
    alt_description: String
    transcript: String
}

type PostAudio {
    uri: String!
    alt_description: String
    transcript: String
}

type PostLink {
    url: String!
}

union PostContent = String | PostImage | PostAudio | PostLink | PostVideo 

type Query {
    people: [Person!]!
    places: [Place!]!
    things: [Thing!]!
    groups: [Group!]!
    events: [Event!]!
}